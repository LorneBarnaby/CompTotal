// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]

  competitions   Competition[]
  followingComps BwlEventFollower[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Competition{
  id    Int    @id @default(autoincrement())
  name String
  startDate DateTime?
  lifters CompLifter[]
  ownerId Int
  owner User @relation(fields: [ownerId], references: [id])
}

model BwlComp{
  id Int @id
  name String
  fromDate DateTime
  toDate DateTime
  updatedAt DateTime? @updatedAt
  url String
  lifters BwlCompLifter []
  followers BwlEventFollower []
}

model BwlCompLifter {
  name String
  club String
  category String
  lifterid String
  owurl String?
  bwlurl String?
  bwlCompId Int
  bwlComp BwlComp @relation(fields: [bwlCompId], references: [id])
  best_snatch Int?
  best_cj Int?
  best_total Int?
  num_comps Int?
  @@unique([bwlCompId, lifterid])
}

model CompLifter{
  id    Int    @id @default(autoincrement())
  name String
  openwlUrl String?
  competition Competition @relation(fields: [competitionId], references: [id])
  competitionId Int
}

model BwlEventFollower{
  bwlCompId Int
  bwlComp BwlComp @relation(fields: [bwlCompId], references: [id])
  followerId Int
  follower User @relation(fields: [followerId], references: [id])

  @@unique([followerId, bwlCompId])
}